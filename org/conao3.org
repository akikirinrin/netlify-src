#+title: Hugo blog source
#+author: conao3
#+date: <2020-01-01 Wed>
#+options: ^:{}

#+hugo_base_dir: ../

#+link: files file+sys:../static/files/

* blog
:PROPERTIES:
:EXPORT_HUGO_SECTION: blog
:END:

** DONE License
CLOSED: [2020-05-04 Mon 17:36]
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-7c03-e946
:EXPORT_HUGO_TAGS: meta
:EXPORT_HUGO_LASTMOD: [2020-05-05 Tue 16:20]
:END:
*** License
- All articles (sentence) are distributed under [[https://creativecommons.org/licenses/by/4.0/legalcode.txt][CC BY]].
  #+begin_example
  Creative Commons Attribution 4.0 International Public License (CC BY)
  Copyright (c) Hiroshima.lisp - https://lisp.netlify.app
  https://creativecommons.org/licenses/by/4.0/legalcode
  #+end_example
- All source code are distributed under [[https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt][CC0]].
- All cited source code respects the license of the cited source.
  - [[https://www.gnu.org/licenses/gpl-3.0.txt][GPLv3]] - Emacs related source code.
  - MIT

*** Dependent materials/sources license
- Hiroshima.lisp icon made by [[https://www.flaticon.com/authors/freepik][freepik]] from [[https://www.flaticon.com/][www.flaticon.com]] ([[https://www.freepikcompany.com/legal][Term of use]]).
- [[https://fontawesome.com/][Font Awesome]] - [[http://scripts.sil.org/OFL][SIL OFL 1.1]]
- [[https://feathericons.com/][Feather icons]] - [[https://github.com/feathericons/feather/blob/master/LICENSE][MIT]]
- [[https://jquery.org/][jQuery]] - [[https://jquery.org/license/][MIT]]
- [[https://getbootstrap.com/][Bootstrap]] - [[https://github.com/twbs/bootstrap/blob/v4.0.0/LICENSE][MIT]]
- [[https://gohugo.io/][Hugo]] - [[https://gohugo.io/about/license/][Apache 2.0]]
- [[https://golang.org/][Go]] - [[https://golang.org/LICENSE][BSD]]

*** Using Hugo blog theme
- [[https://github.com/conao3/anatole-ext][conao3/anatole-ext]] - [[https://github.com/conao3/anatole-ext/blob/master/LICENSE][MIT]]

*** Respected Hugo blog theme
- [[https://github.com/lxndrblz/anatole][lxndrblz/anatole]] - [[https://github.com/lxndrblz/anatole/blob/master/LICENSE][MIT]]
- [[https://github.com/hi-caicai/farbox-theme-Anatole][hi-caicai/farbox-theme-Anatole]] - [[https://github.com/hi-caicai/farbox-theme-Anatole][MIT]]
- [[https://github.com/kbaidya21/liva-hugo][kbaidya21/liva-hugo]] - [[https://github.com/kbaidya21/liva-hugo/blob/master/LICENSE][MIT]]
** DONE Netlify + Hugo + ox-hugoでブログを初める第一歩
CLOSED: [2020-05-05 Tue 22:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-c47c-f2b7
:EXPORT_HUGO_TAGS: meta hugo ox-hugo
:EXPORT_HUGO_LASTMOD: [2020-05-05 Tue 16:20]
:END:
*** tl;dr
- Netlify + Hugo + ox-hugoでブログを書くことにしました
- 多少の方針決定とコーディングが必要になりましたが、快適なブログ執筆環境が整いました
- Netlify + Hugo + ox-hugoはいいぞ

*** Intro
HTMLジェネレータの[[https://github.com/conao3/seml-mode.el][seml-mode.el]]とOrg->HTMLジェネレータ拡張の[[https://github.com/conao3/orglyth.el][orglyth.el]]を作っていて、自分のブログくらいはそれらを使って構築しようと思っていました。

しかし結局落ち着かないまま1年が経過し、[[https://github.com/conao3/leaf.el][leaf.el]]のドキュメントや、専門分野のまとめなどネットで公開したいものだけ溜まっていました。

[[https://conao3.com][conao3.com]]のドメインも2017年から持っていますが、3年もの間まともなコンテンツは提供されませんでした。

ここらへんで諦めてさっさとHugoとNetlifyで公開してしまえということで、きちんと整備されたツールを使わせてもらい、この度ようやく[[https://conao3.com][conao3.com]]でまともなコンテンツを提供できるようになりました。

*** Netlify
よい情報で溢れているので省略します。

NetlifyはDNSも提供しているようなので、「さくらのドメイン」で取得したconao3.comをNetlify DNSで解決させるようにしました。

また、デフォルトでは古いHugoが動いているようなので、「Build & Deploy」->「Environment」->「Environment variables」で「HUGO_VERSION」をローカルのバージョンで設定します。
私の場合「0.69.2」でした。

*** Hugo
**** Hugoのインストール
[[https://gohugo.io/getting-started/installing/][Install Hugo]]を参考にHugoをインストールします。

記載がありませんが、Archの場合はpacmanで簡単に入ります。([[https://www.archlinux.jp/packages/community/x86_64/hugo/][Archlinux - Package]])

#+begin_src shell
  # pacman -S hugo
  $ hugo version
  Hugo Static Site Generator v0.69.2/extended linux/amd64 BuildDate: unknown
#+end_src

**** ブログテンプレートの展開
[[https://gohugo.io/getting-started/quick-start/][Quick Start]]を参考にテンプレートを展開します。

私はローカルのレポジトリ置き場は =~/dev/repos= にしています。

#+begin_src shell
  $ cd ~/dev/repos
  $ hugo new site netlify-src
#+end_src

以下、 =netlify-src= はhugoサイトのルートディレクトリということにします。

**** ブログテーマの適用
[[https://themes.gohugo.io/][Hugo themes]]からいい感じのテーマを探し、submoduleでレポジトリに持ちます。

テーマはローカルで簡単にカスタマイズできる仕組みがあるので、多少気に入らないところがあっても大丈夫です。

#+begin_src shell
  $ cd quickstart
  $ git init
  $ git submodule add https://github.com/lxndrblz/anatole.git themes/anatole
#+end_src

テーマごとにカスタマイズする方法が違うので、テーマのREADMEを読んで設定をして下さい。

なお、私は当時ローカルで簡単にカスタマイズできる機構を知らず、forkでカスタマイズするしかないと思っていたので、「[[https://zwbetz.com/make-a-hugo-blog-from-scratch/][Make a Hugo blog from scratch]]」を参考に0からテーマを作りました。

私が作ったテーマは[[https://github.com/conao3/anatole-ext][conao3/anatole-ext]]で公開しています。

**** サンプル記事の追加
サンプルの記事を追加します。

テーマが =exampleSite= というフォルダを持っている場合は、それらのファイルを =netlify-src/= にコピーするだけでいいです。

コマンドでテンプレートを作成するには次のコマンドを実行します。
実行後、 =content/blog/my-first-post.md= が作成されているので、よしなに編集します。

#+begin_src shell
  $ hugo new blog/my-first-post.md
#+end_src

**** ローカルサーバーの起動
Hugoは簡単にローカルサーバーを起動でき、さらに依存ファイルが変更されたときに自動でブラウザにリロードさせることができます。

#+begin_src shell
  $ hugo server -D
#+end_src

サーバーを起動すると =localhost:1333= で配信されます。

**** 静的サイトのビルド
サイト全体のビルドは下記で行います。

Netlifyで公開するならローカルでビルドする必要はないのですが、最終的にどんなツリーになっているかを確認することができます。

#+begin_src shell
  $ hugo
#+end_src

*** ox-hugo
**** ox-hugoのインストールと設定
[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]をインストールし、適宜設定を行ないます。

「[[https://pxaka.tokyo/blog/categories/hugo/][hugo | IMADENALE]]」を参考に無難な構成を考えましたが、もっといい方法がある気がします。
とりあえず私は下記の設定と方針でしばらくやってみます。

#+begin_src emacs-lisp
  (leaf ox-hugo
    :doc "Hugo Markdown Back-End for Org Export Engine"
    :req "emacs-24.4" "org-9.0"
    :tag "docs" "markdown" "org" "emacs>=24.4"
    :added "2020-05-05"
    :url "https://ox-hugo.scripter.co"
    :emacs>= 24.4
    :ensure t
    :after ox
    :custom ((org-hugo-front-matter-format . "yaml")))
#+end_src

**** orgファイル管理の方針
ox-hugo用のorgファイルは =netlify-src/org/{{user}}.org= に持つことにしました。

#+begin_src org
  ,#+title: Hugo blog source
  ,#+author: conao3
  ,#+date: <2020-05-05 Tue>
  ,#+options: ^:{}

  ,#+hugo_base_dir: ../
  ,#+hugo_section: blog

  ,#+link: files file+sys:../static/files/

  ,* blog
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: blog
  :END:

  ,** DONE test                                                      :meta:hugo:
  CLOSED: [2020-05-05 Tue 19:21]
  :PROPERTIES:
  :EXPORT_FILE_NAME: test
  :EXPORT_DATE: 2020-05-05T00:00:00+09:00
  :EXPORT_HUGO_LASTMOD: [2020-05-05 Tue 16:20]
  :END:

  testestest.
#+end_src

もし将来的にこのorgファイルが超巨大なファイル(1万行~)になれば、適宜 =netlify-src/org/archive-{{user}}-{{num}}.org= に移すことにします。

レベル1は[[https://gohugo.io/content-management/sections/][セクション]]の分類に使い、レベル2のheadingから記事のツリーと解釈されます。

**** 静的ファイル管理の方針
filesのlinkは「[[https://pxaka.tokyo/blog/2018/a-test-of-images/][画像の埋め込みテスト | imadenale]]」を参考にしました。

スクリーンショットやPDFは =netlify-src/static/files= 以下に持つことにします。

=netlify-src/static= はレポジトリ肥大化を避けて[[https://github.com/conao3/netlify-src][conao3/netlify-src]]から[[https://github.com/conao3/netlify-src-blob][conao3/netlify-src-blob]]に切り出し、submoduleで持つことにします。

参考記事ではfilesのリンクをURLで設定していましたが、「[[https://qiita.com/takaxp/items/96629bbcc4a9403f0213][Org Modeのリンク機能で情報集約 | Qiita]]」を参考に =fils+sys:= 指定を使うとorgの画像インライン表示もできますし、きちんとox-hugoによってリンクが修正され、正しいマークダウンが出力されました。

- Input
  #+begin_src org
    ,#+link: files file+sys:../static/files/

    ,#+attr_html: :width 128px
    [[files:logo.jpg]]
  #+end_src

- Output
  #+begin_src markdown
    \{\{< figure src="/files/logo.jpg" width="128px" >\}\}
  #+end_src

- Rendering
  #+attr_html: :width 128px
  [[files:logo.jpg]]

*** Deploy
NetlifyのデプロイはGitHubにpushするだけです!

Hugoのビルドはとても早く、pushしてNetlifyのログを見に行くともう終わっています。

ビルドできたら個人Slackに通知飛したりするのをまた今度やりたいと思っています。

*** Conclusion
Netlify + Hugo + ox-hugoで快適なブログ執筆環境を整えることができました!

ようやく情報発信する環境が整ったので、どんどん情報を発信していきたいと思います。

まずは見やすいleaf.elのドキュメントを書きます!

また、執筆現在は[[https://github.com/conao3/netlify-src][conao3/netlify-src]]と[[https://github.com/conao3/netlify-src-blob][conao3/netlify-src-blob]]をパブリックレポジトリとしていますが、後でプライベートレポジトリに変更し、[[https://www.patreon.com/conao3][Patreon]]の特典にします。

本来公開するものを非公開にすることでしか価値を付けられないことをお許しください。

ぜひ[[https://www.patreon.com/conao3][Patreon]]で私の活動のサポートをして頂けるとうれしいです!
** DONE 個人ブログのパーマリンクに関する最適戦略について
CLOSED: [2020-05-06 Wed 22:52]
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-c088-84d5
:EXPORT_HUGO_TAGS: meta seo permalink
:EXPORT_HUGO_LASTMOD:
:END:
*** tl;dr
- 個人ブログにおけるパーマリンクはどのように設計するべきなのでしょうか
- SEOやURLシェアの観点から、「強いキーワード」を含む、短かいパーマリンクが好まれる
- しかし、サイト中でのURL衝突が面倒なのでランダム値で自動生成することにした

*** Intro
Webで情報を公開するにあたって、パーマリンクの設計は将来に渡って重要なものです。

このブログは人生において3つめのブログであり、これまでの2つのブログは勝手にアーカイブしてネットから消してしまいました。

しかしこのブログは今のところ死ぬまで付き合うつもりであり、それが出来るようにコンテンツの少ない今、設計する必要があります。

ブログ管理の裏側については「[[Netlify + Hugo + ox-hugoでブログを初める第一歩]]」に書きましたが、パーマリンクの設計は表側の設計であり、ブログの人生の中で途中で変えることは許されていません。

もし無理矢理変えれば、これまでシェアしてもらったURLの意味は失くなり、404ページに多くの読者を案内してしまうことになります。

さて、このブログではどのようにパーマリンクを設計すると良いのでしょうか。

*** 調査
パーマリンクの設計といっても選択肢は多くありません。

そもそも使える情報が =タイトル= と =公開日時= と =連番= くらいしかないので、代表的なものは以下のような形式か、その組み合わせです。

- ={{base-url}}= / ={{title}}= /
- ={{base-url}}= / ={{short-title}}= /
- ={{base-url}}= / ={{category}}= / ={{short-title}}= /
- ={{base-url}}= / ={{num}}= /
- ={{base-url}}= / ={{year}}= / ={{month}}= / ={{day}}= /

={{title}}= はそのまま記事のタイトルを使う方法です。
日本語のタイトルはそのままURLエンコードされ、URLになるパターンです。

={{short-title}}= はSEOに強い、記事ごとにつけられた短いタイトルを使う方法です。
あえて日本語を使う理由もなく、普通は英数字のみで長くても30文字くらいでまとめます。

={{category}}= は記事ごとに設定されたカテゴリーを使う方法です。

={{num}}= はサイトごとにカウンタを持っておいて、その連番をURLに使用する方法です。

={{year}}=, ={{month}}=, ={{day}}= は記事の公開日です。

*** 評価
さて、これらの方法のなかで、どれがよいのでしょうか。

大きく分けると2つの分類ができ、記事ごとに新たに考える方法と自動で生成する方法です。

- 記事ごとに新たに考える方法
  - ={{short-title}}=
    - メリット
      - SEOやURLシェアの観点から最高の選択肢
    - デメリット
      - 記事ごとに短いタイトルを英語でつけなおさなければならない
      - 記事を少ない英単語で表現するのは一般的に難しく、長くなってしまう場合もある
      - 少ない英単語で命名するため、URL衝突を考慮する必要がある
      - もし、Emacsと命名した記事より、もっと適切な記事を書いた場合にその名前はもう使えない
  - ={{category}}=
    - メリット
      - URLから得られる情報がある
      - カテゴリー名は記事名に比べて、ずっと少ないので、命名はあまり苦でない
    - デメリット
      - [[https://ja.wikipedia.org/wiki/%E3%81%93%E3%81%86%E3%82%82%E3%82%8A%E5%95%8F%E9%A1%8C][こうもり問題]]の発生 (カテゴリ管理の問題点)

- 自動で生成する方法
  - ={{title}}=
    - メリット
      - 記事ごとに考えなくてよい
    - デメリット
      - 日本語のタイトルをつけるとURLが長大になる
  - ={{num}}=
    - メリット
      - 記事ごとに考えなくてよい
      - キリ番記事が作りやすい (100記事達成記事など)
    - デメリット
      - 記事を後から非公開にすると、欠番が生じる
      - URLから得られる情報が少ない
  - ={{year}}=, ={{month}}=, ={{day}}=
    - メリット
      - 記事ごとに考えなくてよい
      - URLを見れば公開日が分かる (技術系記事において新しい記事は重要)
    - デメリット
      - URLから得られる情報が少ない

というところでしょうか。
それぞれにメリットとデメリットがあるので、それを評価した後は好みの問題となります。

*** 決定
前段の評価に基づいて、私はこのブログのパーマリンクを以下のように設計しました。

- ={{base-url}}= / blog / ={{year}}= / ={{random}}=

まず、私はとてもものぐさなので、記事ごとにショートタイトルを与える方法は難しいです。
いくらSEOやURLシェアの観点から最良の選択だと言っても、記事を書くモチベーションを失っては元も子もありません。

タイトルをそのまま付ける方法は、記事ごとに自動で決定できるので魅力的ですがきびしいです。各見出しの =id= は日本語をURLエンコードしたものをしかたなく使うとして、2つの要素をURLエンコードすると簡単に256文字を超えます。もちろん現代ではURLの流さに制限はないですが、限度はあると思います。

カテゴリー管理も同じような階層が現われ、破綻することが目に見えています。
実は前回のブログはそれで破綻したのです。 =/emacs/= と =/blog/emacs/=, =blog/advent/emacs/= などが乱立し、新たな記事をどの階層に作ればよいのか混乱する要因になりました。


連番を付ける方法も魅力的ですが、欠番が発生することに耐えられません。これは気分の問題です。

日付を使用する方法はとても良いと思います。
URLから得られる情報もありますし、後述するランダム値の衝突について「永遠」を考えなくてすみます。

ここまで、日付を使うことが決まり、タイトルもだめ、ショートタイトルもだめ、連番もだめといろいろな物を拒否した結果、一意性を確保するものとして使えるものはランダム値しかありません。

*** まとめ
使用するパーマリンクを設計することができました。
しかし、 ={{random}}= はどれだけのビット数を使い、どのようなフォーマットを使うべきでしょうか。

その考察は次の記事「[[誕生日のパラドックスから考察する、個人ブログURLに必要なランダムビット数]]」に譲るとして、この記事ではパーマリンク設計について大きな決定ができたので、とても満足しています。

なお、例外的に ={{base-url}}= / emacs / ={{package-name}}= というURLを使おうと思っています。
これはるびきちさんの[[http://emacs.rubikitch.com/#outline-container-9b95cd58a36fa4354dfb22f76d9b2460][パーマリンク設計]]を踏襲しています。
るびきちさんと同じようにEmacsのパッケージ紹介記事ではこのURLを使用しようと思います。

** DONE 誕生日のパラドックスから考察する、個人ブログURLに必要なランダムビット数
CLOSED: [2020-05-07 Thu 15:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-28cb-467d
:EXPORT_HUGO_TAGS: math stat permalink
:EXPORT_HUGO_LASTMOD: [2020-05-08 Fri 23:13]
:END:
*** tl;dr
- ブログのURLにランダム値を使うとして、必要なビット数は何桁だろうか
- ハッシュ衝突の問題は「誕生日のパラドックス」と同じ状況設定
- 数学的な裏付けの元で、ランダムビットを28桁確保すれば十分

*** Intro
「[[個人ブログのパーマリンクに関する最適戦略について]]」において、

- ={{base-url}}= / blog / ={{year}}= / ={{random}}=

というURLをこのブログに使うことに決めました。しかし、 ={{random}}= はどれだけのビット数を使い、どのようなフォーマットを使うべきでしょうか。

幸い、 ={{year}}= を入れているので、「永遠」を考える必要はありません。
せいぜい「1年」でどれだけの記事を書くのかを見積れば良いことになります。

毎日、1記事を書いたとして $365$ 記事、多めに見積もって $400$ 記事とします。
さらに毎日、 $5$ 記事書くことを上限と仮定すると $5 \times 400 = 2000$ 記事となり、せいぜい $2000$ 記事がある場合に必要なランダムビット数を求めたいと思います。

*** 誕生日のパラドックス
「[[https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9][誕生日のパラドックス - Wikipedia]]」より、
#+begin_quote
誕生日のパラドックス（たんじょうびのパラドックス、英: birthday paradox）とは「何人集まれば、その中に誕生日が同一の2人（以上）がいる確率が、50%を超えるか?」という問題から生じるパラドックスである。鳩の巣原理より、366人（閏日も考えるなら367人）集まれば確率は100%となるが、しかしその5分の1に満たない70人しか集まらなくても確率は99.9%を超え、50%を超えるのに必要なのはわずか23人である。

誕生日のパラドックスは論理的な矛盾に基づいているという意味でのパラドックスではなく、結果が一般的な直感と反しているという意味でのパラドックスである。
#+end_quote

Wikipediaでも計算してありますが、ここでも計算しておきます。

きちんと問題として整理すると以下のようになります。

#+begin_quote
Aさんを含め、n人がいる。一年を365日とし、誕生日は全ての日で等確率とする。

1. Aさんと同じ誕生日の人が存在する確率 $P_1$
2. 同じ誕生日の人が存在する確率 $P_2$
3. $P_1$ と $P_2$ が $50$ %を超えるのにそれぞれ必要な人数 $n_\text{min1}$, $n_\text{min2}$
#+end_quote

1. Aさんと同じ誕生日の人が存在する確率 $P_1$

   余事象で求める。

   Aさん以外の人は $\frac{364}{365}$ の確率でAさんの誕生日と衝突しない。
   Aさん以外の人は $n-1$ 人存在するので、

   $$ P_1 = 1 - \qty(\frac{364}{365})^{n-1} $$

2. 同じ誕生日の人が存在する確率 $P_2$

   余事象で求める。

   n人の誕生日が異なる確率は
   $$ \frac{364}{365}\cdot\frac{363}{365}\cdot\frac{362}{365}\cdots\frac{365-(n-1)}{365} = \frac{{}_{364}\mathrm{P}_{n-1}}{365^{n-1}} = \frac{{}_{365}\mathrm{P}_n}{365^n}$$

   よって
   $$ P_2 = 1 - \frac{{}_{365}\mathrm{P}_n}{365^n} $$

3. $P_1$ と $P_2$ が $50$ %を超えるのにそれぞれ必要な人数 $n_\text{min1}$, $n_\text{min2}$

   $n_\text{min1}$ については計算できる。

   \begin{aligned}
     P_1 = 1 - \qty(\frac{364}{365})^{n-1} &> 0.5 \\
     0.5 &> \qty(\frac{364}{365})^{n-1} \\
     \log_2(0.5) &> (n-1)\log_2\qty(\frac{364}{365}) \\
     -1 &> (n-1)(-0.003958) \\
     253.65 &< n
   \end{aligned}

   よって $n_\text{min1}=254$ となる。

   $n_\text{min2}$ については面倒なので、Pythonを用いて図示する。

   #+begin_src python :exports both :cache yes :file ../static/files/65d26e9c-99a3-411c-9dbf-047dcd474d5c.png
     import matplotlib.pyplot as plt
     import numpy as np

     memo = np.full(400, -1.0)
     def NPn (n):
         """
         余事象の確率
         n人の誕生日が異なる確率
         """
         if n == 0 or n == 1:
             memo[0] = 1
             return memo[0]
         elif n >= 366:
             return 1;
         elif memo[n] != -1:
             return memo[n]
         else:
             p = NPn(n-1) * ((365-(n-1))/365.0)
             memo[n] = p
             return memo[n]

     def Pn (n):
         """
         n人のうち、2人以上誕生日が同じ確率
         """
         return 1 - NPn(n)

     n = 70
     with plt.style.context(('science-transparent')):
         y = [Pn(i) for i in range(n)]
         plt.plot(y)
     
         plt.xlabel('n')
         plt.ylabel('P_n')
     
         plt.axhline(0.5, color='C1')
         n_min2 = np.searchsorted(y, 0.5)
         plt.annotate('({}, {:.2f})'.format(n_min2, y[n_min2]),
                      (n_min2, y[n_min2]), (n_min2-15, 0.8),
                      arrowprops = dict(arrowstyle='-|>', mutation_scale=20))
     
         plt.show()
   #+end_src

   #+RESULTS[9b7db4cfadb9c6344f9aabc0f5f93ac602d758b1]:
   [[file:../static/files/65d26e9c-99a3-411c-9dbf-047dcd474d5c.png]]

   グラフから、 $n_{min2} = 23$ 。

上記のとおり $n_{min1} = 254$, $n_{min2} = 23$ となり $P_{min2}$ は直感よりも少ないように思います。

直感との乖離の理由は「自分と同じ誕生日の人が存在する確率」と「同じ誕生日の組が存在する確率」を混同してしまうからです。

*** ランダム値の衝突
今回問題にしているようなランダム値の衝突については、
「あるひとつのランダム値が衝突する事象」ではなく、「どれでもいいのでランダム値が衝突する事象」を考える必要があるので、
まさに誕生日のパラドックスと同じ状況設定となります。

誕生日のパラドックスでは365個の集合でしたが、今回は変数 $N$ とします。

前段の $P_2$ を参考に、 $N$ 個の集合から $n$ 個ランダム値を取ってきたときに、同じ値が存在する確率 $p$ は次の形となります。

\begin{aligned}
  p &= 1 - \frac{N-1}{N}\cdot\frac{N-2}{N}\cdot\frac{N-3}{N}\cdots\frac{N-(n-1)}{N} \\
    &= 1 - \qty(\qty(1-\frac{1}{N})\qty(1-\frac{2}{N})\qty(1-\frac{3}{N})\qty(1-\frac{n-1}{N})) \\
    &= 1 - \prod_{m=1}^{n-1}\qty(1-\frac{m}{N})
\end{aligned}

ここで、ネイピア数のテイラー展開は次の形です。 $x$ が十分小さいときは1次までの近似が使えます。

\begin{aligned}
  e^{-ax} &= 1 - ax + a^2\frac{x^2}{2!} - a^3\frac{x^3}{3!} + a^4\frac{x^4}{4!} + \cdots \\
         &\approx 1 - ax
\end{aligned}

$N$ はランダム値の全体総数なので、 $\frac{i}{N}$ は十分小さく、ネイピア数のテイラー展開から近似を使えます。

\begin{aligned}
  p = 1 - \prod_{m=1}^{n-1}\qty(1-\frac{1}{N}m) &\approx 1 - \prod_{m=1}^{n-1}\exp\qty(-\frac{1}{N}m) \\
   &= 1 - \exp\qty(\sum_{m=1}^{n-1}\qty(-\frac{m}{N})) \\
   &= 1 - \exp\qty(-\frac{1}{N}\sum_{m=1}^{n-1}m) \\
   &= 1 - \exp\qty(-\frac{n(n-1)}{2N})
\end{aligned}

さらに $n$ について変形します。途中、 $n$ が十分大きいことから、定数の減算を無視しました。

\begin{aligned}
  \exp\qty(-\frac{n(n-1)}{2N}) &= 1-p \\
  -\frac{n(n-1)}{2N} &= \ln(1-p) \\
  n(n-1) &= -2N\ln(1-p) \\
  n^2 &\approx 2N\ln\qty(\frac{1}{1-p}) \\
  n &= \sqrt{2N\ln\qty(\frac{1}{1-p})}
\end{aligned}

*** 数値計算
**** Nが与えられている場合
ランダム値の大きさ($N$)が与えられている場合、何個ランダム値を取り出したら($n$)衝突するでしょうか。
なお $p=0.5$ とします。

\begin{aligned}
  n = \sqrt{2N\ln\qty(\frac{1}{1-0.5})} &= \sqrt{2N\ln2} \\
   &\approx 1.1774\sqrt{N} \\
   &\approx \sqrt{N}
\end{aligned}

最後の近似はオーダーを見積もるためにとても雑な近似を行いました。

もしランダムビットが *64bit* の場合、ランダム値の集合は $2^{64}$ となり、
$2^{32} = (42.9\text{億})$ 個([[https://www.wolframalpha.com/input/?i=2%5E%2832%29][WolframAlpha]])のランダム値を生成したら、確率 $0.5$ で衝突することになります。

**** Nを求めたい場合
逆に今回私は試行回数、1年 $2000$ 記事($n=2000$)からランダム値の大きさ($N$)を求めたいと思っています。
なお、ランダム値の大きさ $N$ はビット数 $b$ を用いて $N=2^b$ と書けます。

衝突する確率 $p$ は $1$ %と仮定します。

\begin{aligned}
  n &= \sqrt{2N\ln\left(\frac{1}{1-0.01}\right)} \\
  2000 &= \sqrt{2N\ln\left(\frac{1}{0.99}\right)} \\
  2000^2 &= 2N \cdot 0.0100 \\
  N = 2^b &= 1000 \cdot 2000 \cdot 100 \\
  b &= 27.5
\end{aligned}

以上、ランダムビット数は28桁あれば十分ということになります。

16進数の表記を使えば1文字で4ビットの自由度があるので、結局、8文字あれば十分ということが分かりました。

*** まとめ
誕生日のパラドックスを導入としてランダム値の衝突問題(ハッシュ衝突問題)について考えました。

長々書いてきましたが、数学的な裏付けのもとで必要なランダムビット数が分かり、パーマリンクのフォーマットを決めることができました。

次の記事「[[ox-hugo用のorg-captureテンプレートについて]]」ではこのフォーマットを実現するためのox-hugoの運用について書きたいと思います。

*** 参考
- [[https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9][誕生日のパラドックス - Wikipedia]]
- [[https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E6%94%BB%E6%92%83][誕生日攻撃 - Wikipedia]]
- [[https://mathtrain.jp/birthday][同じ誕生日の二人組がいる確率について - 高校数学の美しい物語]]
- [[https://qiita.com/ta_ta_ta_miya/items/1f8f71db3c1bf2dfb7ea][UUID(v4) がぶつかる可能性を考えなくていい理由 - Qiita]]
- [[https://tex2e.github.io/blog/crypto/birthday-attack][誕生日攻撃 (Birthday Attack) - 晴耕雨読]]

** DONE ox-hugo用のorg-captureテンプレートについて
CLOSED: [2020-05-07 Thu 18:53]
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-1049-5b91
:EXPORT_HUGO_TAGS: org ox-hugo org-capture permalink meta transient-dwim
:EXPORT_HUGO_LASTMOD:
:END:
*** tl;dr
- 記事新規作成のために必要な情報が揃った
- ox-hugo用のorg-captureテンプレートが必要
- テンプレートを用意したので、いつでもブログが気軽に書けるようになった

*** Intro
下記のブログの記事で考えて、ようやく記事を新規作成するために必要な情報が整いました。

- 「[[Netlify + Hugo + ox-hugoでブログを初める第一歩]]」
- 「[[個人ブログのパーマリンクに関する最適戦略について]]」
- 「[[誕生日のパラドックスから考察する、個人ブログURLに必要なランダムビット数]]」

org-captureはいつも設定しておきながら、設定したことを忘れているのですが、ox-hugoを使うにあたってきちんと入門したいと思います。

*** org-capture
[[https://orgmode.org/org.html#Capture-and-Attachments-1][org-capture]]はEmacsのどこにいてもorgでメモを取るためのフロントエンドです。

org-captureのユーザーはたくさんおり、設定例も溢れていますが、
「自分でグローバルバインドを設定しなければならない」という点が性に合わず、結局使わずじまいでした。

少し本題からずれますが、そもそも =C-c= につづくアルファベット、修飾キー付きのアルファベット、プレフィックスを自由に設定できるとして、覚えられる気がしません。

私のglobal-mapは[[https://github.com/conao3/transient-dwim.el][transient-dwim]]だけを設定しており、他のバインドはマイナーモード、メジャーモードのキーマップのみです。
transient-dwimは[[https://github.com/magit/transient][transient]]を利用したキーバインド管理パッケージです。

transient-dwimを =M-== に設定している場合、org-captureは =M-== =M-o M-o= で起動できます。

[[files:1e21eb45-e047-40f2-bccd-63683857ec8d.gif]]

*** ox-hugoの設定
「[[https://pxaka.tokyo/blog/2018/44febe88-04a5-9bc4-6bfb-678a8477a0ed/][ファイル名をUUIDで自動生成するテスト - IMADENELE]]」と「[[https://pxaka.tokyo/blog/2018/58e5bcee-1fb9-48a4-628b-a80692983bfe/][最終変更日の手動設定 - IMADENELE]]」を参考にテンプレートを調整しました。

#+begin_src emacs-lisp
  (leaf ox-hugo
    :doc "Hugo Markdown Back-End for Org Export Engine"
    :req "emacs-24.4" "org-9.0"
    :tag "docs" "markdown" "org" "emacs>=24.4"
    :added "2020-05-05"
    :url "https://ox-hugo.scripter.co"
    :emacs>= 24.4
    :ensure t
    :after org
    :require t
    :defun (org-set-property)
    :custom ((org-hugo-front-matter-format . "yaml"))
    :config
    (defun c/ox-hugo-add-lastmod nil
      "Add `lastmod' property with the current time."
      (interactive)
      (org-set-property "EXPORT_HUGO_LASTMOD"
                        (format-time-string "[%Y-%m-%d %a %H:%M]")))

    (leaf *ox-hugo--capture
      :require org-capture
      :defvar (org-capture-templates)
      :config
      (add-to-list 'org-capture-templates
                   '("b" "Create new blog post" entry
                     (file+headline "~/dev/repos/netlify-src/org/conao3.org" "blog")
                     "** TODO %?
  :PROPERTIES:
  :EXPORT_FILE_NAME: %(apply #'format \"%s-%s-%s\"
          (format-time-string \"%Y\")
          (let ((sha1 (sha1 (shell-command-to-string \"head -c 1k /dev/urandom\"))))
            (cl-loop for (a b c d) on (cdr (split-string sha1 \"\")) by #'cddddr repeat 2 collect (concat a b c d))))
  :EXPORT_HUGO_TAGS:
  :EXPORT_HUGO_LASTMOD:
  :END:
  "))
      (add-to-list 'org-capture-templates
                   '("p" "Create new package post" entry
                     (file+headline "~/dev/repos/netlify-src/org/conao3.org" "emacs")
                     "** TODO %?
  :PROPERTIES:
  :EXPORT_FILE_NAME:
  :EXPORT_HUGO_TAGS: emacs
  :EXPORT_HUGO_LASTMOD:
  :END:
  "))))
#+end_src

=p= はパッケージの紹介用で =emacs= ツリー以下に展開されます。

=b= は簡単なブログ用で =:EXPORT_FILE_NAME= は「[[誕生日のパラドックスから考察する、個人ブログURLに必要なランダムビット数]]」をもとに8桁の16進数を使って自動生成します。

8桁の16進数は =/dev/urandom= から1KB読んで、それのsha1の先頭8桁のみを取ることにしました。
この乱数は衝突するときわめて面倒なことになるので、できるだけ均質なランダム値を得る必要があります。
この仕組みを作った後は衝突しないことをもう祈るしかない。。(もし衝突すると単に新しい記事で古い記事が上書きされて、特に警告は出ない。。)

*** まとめ
org-captureの設定をすることによってブログ記事を書くハードルがとても下がりました。

これから情報発信に努めていきたいと思います!

** TODO Arch Linuxでいい感じに揃ったスクリーンショットを撮り、管理する方法
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-24b5-a488
:EXPORT_HUGO_TAGS: arch xfce
:EXPORT_HUGO_LASTMOD:
:END:

[[Netlify + Hugo + ox-hugoでブログを初める第一歩]]
** TODO Test
:PROPERTIES:
:EXPORT_FILE_NAME: 2020-db11-3deb
:EXPORT_HUGO_TAGS: math
:EXPORT_HUGO_LASTMOD:
:END:
test test test

test test test

平方根の高さを揃える $\sqrt{g}$ に \$\sqrt{h}$ は \mathstrut と \smash コマンドを使って $\ssqrt{g}$ と $\ssqrt{h}$ のように表示できる。

test

$$a$$

$$\RR$$

$$\div a$$

$$\sin(\frac{a}{b})$$

$$a \between b$$
